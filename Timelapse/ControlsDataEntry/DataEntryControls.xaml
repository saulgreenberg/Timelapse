<UserControl x:Class="Timelapse.ControlsDataEntry.DataEntryControls"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:controls="clr-namespace:Timelapse.Controls"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">

    <!--#region Control Resources (definitions for the various controls)-->
    <Control.Resources>
        <!--#region Border common colors and thicknesses-->
        <!--Normal Border Color  LightBlue #ADD8E6  173, 216, 230   Value="{StaticResource BorderBrushCommonNormal}" -->
        <!--Highlit Border Color Blue      #0000FF	0, 0, 255       Value="{StaticResource BorderBrushCommonHighlight}"-->
        <SolidColorBrush x:Key="BorderBrushCommonNormal" Color="LightBlue" />
        <SolidColorBrush x:Key="BorderBrushCommonHighlight" Color="Blue" />

        <!--Normal  Border Thickness  1 "{StaticResource BorderThicknessCommonNormal}" -->
        <!--Highlit Border Thickness  2 "{StaticResource BorderThicknessCommonHighlight}" -->
        <Thickness  x:Key="BorderThicknessCommonNormal">1</Thickness>
        <Thickness  x:Key="BorderThicknessCommonHighlight">3</Thickness>
        <!--#endregion -->

        <!--#region DefaultLabel Style: Properties-->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="DefaultLabel" TargetType="Label">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,4,5,0"/>
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Height" Value="25" />

            <!-- Essentially the default label, but sets  RecognizesAccessKey="False" which allows labels to display '_' -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="False"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled"
                                     Value="false">
                                <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>
        <!--#endregion-->

        <!--#region NoteTextBox Style: Properties-->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="NoteTextBox" TargetType="TextBox">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,0,5,0"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Background" Value="Aquamarine"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{StaticResource BorderBrushCommonNormal}" BorderThickness="{StaticResource BorderThicknessCommonNormal}" Background="White">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="White"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- If its Focuses, make the border thicker AND if its not Readonly (i.e., editable, also change the border color -->
                            <MultiTrigger >
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsKeyboardFocused" Value="true" />
                                    <Condition Property="IsReadOnly" Value="false" />
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrushCommonHighlight}" />
                                <Setter Property="BorderThickness" TargetName="border" Value="{StaticResource BorderThicknessCommonHighlight}" />
                            </MultiTrigger>
                            <MultiTrigger >
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsKeyboardFocused" Value="true" />
                                    <Condition Property="IsReadOnly" Value="true" />
                                </MultiTrigger.Conditions>
                                <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrushCommonHighlight}" />-->
                                <Setter Property="BorderThickness" TargetName="border" Value="{StaticResource BorderThicknessCommonHighlight}" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->

        <!-- #region CounterTextBox Style: Properties -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="CounterTextBox" TargetType="xctk:IntegerUpDown">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,0,5,0"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
            <Setter Property="Margin" Value="-5,0,0,0" />
            <Setter Property="Minimum" Value="0" />
            <Setter Property="DisplayDefaultValueOnEmptyText" Value="true" />
            <Setter Property="DefaultValue" Value="{x:Null}" />
            <Setter Property="AllowTextInput" Value="true" />
        </Style>
        <!--#endregion-->

        <!-- #region IntegerTextBox Style: Properties -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="IntegerTextBox" TargetType="xctk:IntegerUpDown">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,0,5,0"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="Focusable" Value="True" />

            <!-- Values are set as needed in PreviewControlCommon code behind -->
            <!-- <Setter Property="IsReadOnly" Value="False" />
            <Setter Property="Minimum" Value="0" />
            <Setter Property="DisplayDefaultValueOnEmptyText" Value="true" />
            <Setter Property="DefaultValue" Value="{x:Null}" />
            <Setter Property="AllowTextInput" Value="true" />
            -->
        </Style>
        <!--#endregion-->

        <!-- #region DoubleTextBox Style: Properties -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="DoubleTextBox" TargetType="xctk:DoubleUpDown">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,0,5,0"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="Focusable" Value="True" />

            <!-- Values are set as needed in PreviewControlCommon code behind -->
            <!--<Setter Property="IsReadOnly" Value="False" />
            <Setter Property="Minimum" Value="-10001"/>
            <Setter Property="DisplayDefaultValueOnEmptyText" Value="true" />
            <Setter Property="DefaultValue" Value="{x:Null}" />
            <Setter Property="ParsingNumberStyle" Value="AllowLeadingSign" />
            <Setter Property="FormatString" Value="F2"></Setter>
            <Setter Property="AllowTextInput" Value="true" />-->
        </Style>
        <!--#endregion-->

        <!-- #region DateTimeBox Style: Properties -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="DateTimeBox" TargetType="xctk:DateTimePicker">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
        </Style>
        <!--#endregion-->

        <!-- #regionTimeBox Style: Properties -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="TimeBox" TargetType="xctk:TimePicker">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
        </Style>
        <!--#endregion-->

        <!--#region ChoiceComboBox Style - uses ToggleButton and implements a Flat Choice style -->
        <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#fff" />
        <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
        <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
        <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

        <!-- ComboBox Toggle Button Template  -->
        <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>

                <!-- ComboBox Toggle Button Border  -->
                <Border Grid.ColumnSpan="2" Name="Border"
                    BorderBrush="{StaticResource BorderBrushCommonNormal}" 
                    CornerRadius="0" BorderThickness="{StaticResource BorderThicknessCommonNormal}"
                    Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

                <!-- ComboBox Toggle Button Button Border  -->
                <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder"
                    CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
                    Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

                <!-- ComboBox Toggle Button Arrow  -->
                <Path Name="Arrow" Grid.Column="1" 
                    Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                    HorizontalAlignment="Center" Fill="#444"
                    VerticalAlignment="Center" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="False">
                    <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                    <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Choice ComboBox Template  -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="ChoiceComboBox"  TargetType="{x:Type ComboBox}">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Height" Value="28" />
            <Setter Property="Padding" Value="5,4,5,5"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
            <Setter Property="IsEditable" Value="False" />

            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="TextElement.Foreground" Value="Black"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Border Name="PART_Border" BorderBrush="{StaticResource BorderBrushCommonNormal}" BorderThickness="{StaticResource BorderThicknessCommonNormal}">
                            <Grid>

                                <!-- Toggle button  -->
                                <ToggleButton Name="ToggleButton" 
                                ClickMode="Press" 
                                Focusable="False"
                                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                                <!--Content Presenter-->
                                <ContentPresenter Name="ContentSite" 
                                    Margin="5, 3, 23, 3" IsHitTestVisible="False"
                                    HorizontalAlignment="Left" VerticalAlignment="Center"                              
                                    Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                    ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />

                                <!--PART_EditableTextBox-->
                                <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Visibility="Hidden" Background="Transparent"
                                HorizontalAlignment="Left" VerticalAlignment="Center"
 
                                Focusable="True">
                                    <TextBox.Template>
                                        <ControlTemplate TargetType="TextBox" >
                                            <Border Name="PART_ContentHost" Focusable="False"/>
                                        </ControlTemplate>
                                    </TextBox.Template>
                                </TextBox>

                                <!-- Popup showing items -->
                                <Popup Name="Popup" Placement="Bottom"
                                    Focusable="False" 
                                    AllowsTransparency="True"
                                    IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                                    PopupAnimation="Slide">
                                    <Grid Name="DropDown" SnapsToDevicePixels="True"
                                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                        <Border Name="DropDownBorder" Background="White" Margin="0, 1, 0, 0"
                                            CornerRadius="0" 
                                            BorderThickness="{StaticResource BorderThicknessCommonNormal}"
                                            BorderBrush="{StaticResource BorderBrushCommonNormal}" 
                                            />
                                        <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--When we tab to the control, accentuate the outline. -->
                            <Trigger Property="ComboBox.IsFocused" Value="True">
                                <Setter TargetName="PART_Border" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}" />
                            </Trigger>

                            <Trigger Property="ComboBox.IsDropDownOpen" Value="True">
                                <Setter TargetName="PART_Border" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}" />
                            </Trigger>

                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.IsGrouping" Value="True">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                            </Trigger>
                            <Trigger Property="ComboBox.IsEditable" Value="True">
                                <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                                <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                                <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--endregion -->

        <!--#region Counter Button Style -->
        <SolidColorBrush x:Key="CounterBrushDisabledForeground" Color="#888" />
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="CounterButton" TargetType="RadioButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Margin" Value="5,0,5,0" />
            <Setter Property="Padding" Value="8,0,8,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">

                        <BulletDecorator Cursor="Hand" VerticalAlignment="Center">

                            <!--Bullet Checkmark-->
                            <BulletDecorator.Bullet >
                                <Grid Height="25" Width="18" >

                                    <!-- Border surrounding the checkmark-->
                                    <Border Name="TickMarkBorder" CornerRadius="3,0,0,3" BorderBrush="Silver" BorderThickness="{StaticResource BorderThicknessCommonNormal}" Height="25" Background="White"/>
                                    <Canvas Name="TickMark" Opacity=".1">
                                        <!-- Mark-->
                                        <Ellipse Name="Mark" Width="10" Height="10" Stroke="Blue" StrokeThickness="2" Fill="LightBlue"  Canvas.Top="7.5" Canvas.Left="4"/>
                                        <!-- Black Outline -->
                                        <Ellipse Width="11" Height="11" Stroke="Black" StrokeThickness="1" Canvas.Top="7" Canvas.Left="3.5"/>
                                        <!-- White Outline -->
                                        <Ellipse Width="12" Height="12" Stroke="White" StrokeThickness="1" Canvas.Top="6.3"  Canvas.Left="3"/>
                                        <!-- Glow-->
                                        <Ellipse Name="Glow" Width="15" Height="15" Stroke="Blue" StrokeThickness="2" Canvas.Top="5.0"  Canvas.Left="1.5" Opacity=".35"/>
                                    </Canvas>

                                </Grid>
                            </BulletDecorator.Bullet>

                            <!--Border surrounding the Text element plus the text-->
                            <Border BorderBrush="Silver" BorderThickness="{StaticResource BorderThicknessCommonNormal}" CornerRadius="0,0,0,0" Width="Auto" Height="25" VerticalAlignment="Center" Margin="-2,0,0,0">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="White" Offset="0" />
                                        <GradientStop Color="#FFE2E2E2" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <TextBlock Name="text"  Margin="5,0,5,0" Foreground="Black" VerticalAlignment="Center" FontWeight="Bold">
                                    <ContentPresenter />
                                </TextBlock>
                            </Border>
                        </BulletDecorator>

                        <!--If item is checked, trigger the visibility of the mark-->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="TickMark" Property="Opacity" Value="1"/>
                                <Setter TargetName="TickMarkBorder" Property="Background" Value="LightBlue"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Mark" Property="Stroke" Value="Gold"/>
                                <Setter TargetName="Mark" Property="Fill" Value="LightYellow"/>
                                <Setter TargetName="Glow" Property="Stroke" Value="Gold"/>
                                <Setter TargetName="Glow" Property="Fill" Value="Gold"/>
                                <Setter TargetName="TickMark" Property="Opacity" Value=".5"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" TargetName="text" Value="{StaticResource CounterBrushDisabledForeground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->

        <!--#region Flag Checkbox -->
        <!-- Flag Checkbox Style: Fill brushes  -->
        <SolidColorBrush x:Key="FlagBrushNormal" Color="#FFF"/>
        <SolidColorBrush x:Key="FlagBrushDark" Color="#AAA"/>
        <SolidColorBrush x:Key="FlagBrushDisabledForeground" Color="#888" />
        <SolidColorBrush x:Key="FlagBrushDisabledBackground" Color="#EEE" />

        <!-- Flag Checkbox Style: Border brushes -->
        <SolidColorBrush x:Key="FlagBrushDisabledBorder" Color="#AAA" />
        <SolidColorBrush x:Key="FlagBrushHighlightBorder" Color="#FF707070" />
        <LinearGradientBrush x:Key="FlagBrushNormalBorder" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#CCC" Offset="0.0"/>
                    <GradientStop Color="#444" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <!-- Flag Checkbox Style: Glyph brushes -->
        <SolidColorBrush x:Key="FlagBrushGlyph" Color="#444" />
        <SolidColorBrush x:Key="FlagBrushGlyphLight" Color="Silver" />

        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="FlagCheckBox" TargetType="{x:Type CheckBox}">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="#FFF"/>
            <Setter Property="BorderBrush" Value="{StaticResource FlagBrushHighlightBorder}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Margin" Value="0,0,0,0"/>
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Height" Value="20" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="checkBoxBorder" 
                                    BorderBrush="{StaticResource FlagBrushNormalBorder}" 
                                    BorderThickness="{StaticResource BorderThicknessCommonNormal}" 
                                    Background="{StaticResource FlagBrushNormal}" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Width="17" 
                                    Height="17" 
                                    CornerRadius="2" 
                                    Margin="1" >
                                <Grid x:Name="markGrid">
                                    <Path x:Name="optionMark" 
                                          Width="11" 
                                          Height="11" 
                                          SnapsToDevicePixels="False" 
                                          Stroke="{StaticResource FlagBrushGlyph}"
                                          StrokeThickness="2"
                                          Data="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                </Grid>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- IsMouseOver True: Highlight -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource FlagBrushDark}"/>
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFF3F9FF"/>
                            </Trigger>

                            <!-- IsEnabled False: Mute the colors  -->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource FlagBrushDisabledBackground}" />
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource FlagBrushDisabledBorder}" />
                                <Setter TargetName="optionMark" Property="Stroke" Value="{StaticResource FlagBrushDisabledBorder}" />
                                <Setter Property="Foreground" Value="{StaticResource FlagBrushDisabledForeground}"/>
                                <!--<Setter Property="Background" TargetName="checkBoxBorder" Value="Red"/>-->
                            </Trigger>

                            <!-- Various conditions for IsPressed and IsChecked.
                                 The idea is that we preview a light checkmark (or ellipsis) when the button is pressed. -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True" />
                                    <Condition Property="IsChecked" Value="True" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="optionMark" Property="Stroke" Value="{StaticResource FlagBrushGlyphLight}" />
                                    <Setter TargetName="optionMark" Property="Data" Value="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True" />
                                    <Condition Property="IsChecked" Value="False" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="optionMark" Property="Stroke" Value="{StaticResource FlagBrushGlyphLight}" />
                                    <Setter TargetName="optionMark" Property="Data" Value="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="False" />
                                    <Condition Property="IsChecked" Value="False" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="optionMark" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="optionMark" Property="Data" Value="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="False" />
                                    <Condition Property="IsChecked" Value="True" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="optionMark" Property="Data" Value="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0"/>
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True" />
                                    <Condition Property="IsChecked" Value="{x:Null}" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="optionMark" Property="Stroke" Value="{StaticResource FlagBrushGlyphLight}" />
                                    <Setter TargetName="optionMark" Property="Data" Value="M 2 8 L 3 8 M 5 8 L 6 8  M 8 8 L 9 8" />
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="False" />
                                    <Condition Property="IsChecked" Value="{x:Null}" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="optionMark" Property="Data" Value="M 2 8 L 3 8 M 5 8 L 6 8  M 8 8 L 9 8" />
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                            <!-- IsKeyboardFocused: Highlight the Flag with a blue thick border -->
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}"/>
                                <Setter TargetName="checkBoxBorder" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->

        <!--#region Container Style Properties -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <Style x:Key="StackPanelContainerStyle" TargetType="StackPanel">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="Orientation" Value="Horizontal"/>
            <Setter Property="Margin" Value="0,0,10,0" />
            <Setter Property="Height" Value="35"/>
        </Style>


        <!-- ReSharper disable once Xaml.RedundantResource -->
        <Style x:Key="GridContainerStyle" TargetType="Grid">
            <!-- ReSharper restore Xaml.RedundantResource -->
            <Setter Property="Height" Value="35"/>
            <Setter Property="Margin" Value="0,0,10,0" />
        </Style>
        <!--#endregion -->

        <!--#region MultiLineText Style -->
        <!-- Put all the parts together to make the multiline control -->
        <!-- ReSharper disable once Xaml.RedundantResource -->
        <Style x:Key="MultiLineTextBox" TargetType="{x:Type controls:MultiLineText}">
            <!--Common values for all controls-->
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5,3,5,0"/>
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="25" />
            <Setter Property="Focusable" Value="True" />
            <Setter Property="IsReadOnly" Value="False" />
            <!--<Setter Property= "DropDownWidth" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Width}"/>-->
            <!--<Setter Property="Content" Value="{StaticResource DefaultContent}" />-->
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
        </Style>
        <!-- #endregion-->

        <!--#region MultiLineEditor Style -->
        <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
        <!--#endregion -->

        <!--#region CheckComboBox Style -->
        <Geometry x:Key="DownArrowGeometry">M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z</Geometry>
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />

        <!-- ReSharper disable once Xaml.RedundantResource -->
        <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />

        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Height" Value="28" />
            <Setter Property="Background"  Value="Red"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <xctk:ButtonChrome x:Name="Chrome"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               Background="{TemplateBinding Background}"
                               CornerRadius="0"
                               RenderEnabled="{TemplateBinding IsEnabled}"
                               RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}"
                               RenderNormal="False"
                               RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}"
                               SnapsToDevicePixels="true">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
                                </Grid.ColumnDefinitions>

                                <TextBox x:Name="TextBox" 
                                             Text="{Binding Content, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                   Foreground="{TemplateBinding Foreground}"
                                   IsReadOnly="True"
                                   Focusable="False"
                                   Cursor="Arrow"
                                   IsTabStop="{TemplateBinding IsTabStop}"
                                   BorderThickness="0"
                                   Background="Transparent"
                                   Margin="{TemplateBinding Padding}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalScrollBarVisibility="Hidden"
                                   VerticalScrollBarVisibility="Hidden" >
                                </TextBox>
                                <Grid Grid.Column="1"
                                    HorizontalAlignment="Right"
                                    Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                    <Path x:Name="Arrow"
                                          Data="{StaticResource DownArrowGeometry}"
                                          Fill="Black"
                                          HorizontalAlignment="Center"
                                          Margin="3,0,3,0"
                                          VerticalAlignment="Center" />
                                </Grid>
                            </Grid>

                        </xctk:ButtonChrome>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="RenderPressed" TargetName="Chrome" Value="true" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
                            </Trigger>
                            <DataTrigger Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type xctk:CheckComboBox}}}" Value="True">
                                <Setter Property="IsReadOnly" Value="False" TargetName="TextBox" />
                                <Setter Property="Focusable" Value="True" TargetName="TextBox" />
                                <Setter Property="Cursor" Value="{x:Null}" TargetName="TextBox" />
                                <Setter Property="IsTabStop" Value="True" />
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type xctk:CheckComboBox}}}" Value="True" />
                                    <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type xctk:CheckComboBox}}}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=TextBox}" />
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MultiChoiceComboBox" TargetType="{x:Type xctk:CheckComboBox}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderThickness" Value="{StaticResource BorderThicknessCommonNormal}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderBrushCommonNormal}"/>
            <Setter Property="Height" Value="28" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <!--<Setter Property="ShowAllTextWhenAllSelected" Value="False"/>-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:CheckComboBox}">
                        <Border Name="PART_Border" BorderBrush="{StaticResource BorderBrushCommonNormal}" BorderThickness="{StaticResource BorderThicknessCommonNormal}">

                            <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                                <Popup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               StaysOpen="False"
                               Margin="1"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               Placement="Bottom">
                                    <Grid MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                        <Border x:Name="DropDownBorder"
                                        MaxHeight="{Binding MaxDropDownHeight,  RelativeSource={RelativeSource TemplatedParent}}"
                                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                                        BorderThickness="1"
                                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                            <ScrollViewer x:Name="DropDownScrollViewer">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas HorizontalAlignment="Left"
                                                      Height="0"
                                                      VerticalAlignment="Top"
                                                      Width="0">
                                                        <Rectangle x:Name="OpaqueRect"
                                                       Fill="{Binding Background, ElementName=DropDownBorder}"
                                                       Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                       Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                                    </Canvas>
                                                    <StackPanel>
                                                        <xctk:SelectAllSelectorItem x:Name="PART_SelectAllSelectorItem"
                                                    Content="{TemplateBinding SelectAllContent}"
                                                    Visibility="{Binding IsSelectAllActive, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" />
                                                        <ItemsPresenter x:Name="PART_ItemsPresenter"
                                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                    </StackPanel>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Grid>
                                </Popup>

                                <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                                <ToggleButton x:Name="PART_DropDownButton"
                                  Content="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  Background="{TemplateBinding Background}"
                                  Focusable="False"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  Style="{StaticResource ComboBoxToggleButton}"
                                  Padding="{TemplateBinding Padding}"
                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  IsHitTestVisible="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" >
                                </ToggleButton>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--When we tab to the control, accentuate the outline. -->
                            <Trigger Property="ComboBox.IsFocused" Value="True">
                                <Setter TargetName="PART_Border" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}" />
                            </Trigger>

                            <Trigger Property="ComboBox.IsKeyboardFocusWithin" Value="True">
                                <Setter TargetName="PART_Border" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}" />
                            </Trigger>

                            <Trigger Property="xctk:CheckComboBox.IsDropDownOpen" Value="True">
                                <Setter TargetName="PART_Border" Property="BorderThickness" Value="{StaticResource BorderThicknessCommonHighlight}" />
                                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource BorderBrushCommonHighlight}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="True">
                    <Setter Property="IsTabStop" Value="False" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type xctk:CheckComboBox}" BasedOn="{StaticResource MultiChoiceComboBox}" />
        <!--#endregion-->
    </Control.Resources>
    <!--#endregion-->

    <!--#region PreviewPanel (as RichTextBox-->
    <RichTextBox IsEnabled="True" IsDocumentEnabled="True" IsReadOnly="True" >
        <FlowDocument  >
            <Paragraph  Name="ControlGrid" TextAlignment="Left" >
                <Floater  HorizontalAlignment="Right" Width="75" Margin="0" Padding="0" >
                    <BlockUIContainer Name="ButtonLocation" Margin="0" Padding="0">
                        <!-- The actual controls will be inserted dynamically through Code Behind -->
                    </BlockUIContainer>
                </Floater>
            </Paragraph>
        </FlowDocument>
    </RichTextBox>
    <!--#endregion-->

</UserControl>
