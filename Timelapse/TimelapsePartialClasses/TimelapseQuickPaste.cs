using System;
using System.Collections.Generic;
using System.Windows;
using Newtonsoft.Json;
using Timelapse.ControlsDataEntry;
using Timelapse.Enums;
using Timelapse.Extensions;
using Timelapse.QuickPaste;

// A Partial class collecting the QuickPaste methods. 
// ReSharper disable once CheckNamespace
namespace Timelapse
{
    public partial class TimelapseWindow
    {
        #region Method - Show / Hide / Terminate the QuickPaste window
        private void QuickPasteWindowShow()
        {
            if (quickPasteEntries == null)
            {
                return;
            }

            // If the quickpast window doesn't exist create it, and
            // add an event handler to it thatis used to generate events that identify the user action taken in that window
            if (quickPasteWindow == null || (!quickPasteWindow.IsLoaded))
            {
                // The quickPasteWindow hasn't been created yet, so do so.]
                // First, ensure that the saved window position fits within the screen, and reposition if needed.
                Rect windowRect = State.QuickPasteWindowPosition;
                // Height and Width should not be negative. There was an instance where it was, so this tries to catch it just in case
                windowRect.Height = Math.Abs(windowRect.Height);
                windowRect.Width = Math.Abs(windowRect.Width);
                windowRect = this.FitIntoASingleScreen(windowRect);
                State.QuickPasteWindowPosition = windowRect;

                // Now, create the window
                quickPasteWindow = new QuickPasteWindow
                {
                    Owner = this,
                    QuickPasteEntries = quickPasteEntries,
                    Topmost = false,
                    WindowStartupLocation = WindowStartupLocation.Manual,
                    Position = State.QuickPasteWindowPosition,
                };

                // Add an event handler to capture events generated by the QuickPaste window
                quickPasteWindow.QuickPasteEvent += QuickPasteWindow_QuickPasteEvent;
            }

            // Finally, show the window if it makes sense to do so
            if (IsFileDatabaseAvailable() && DataHandler.FileDatabase.CountAllCurrentlySelectedFiles > 0)
            {
                quickPasteWindow.Show();
            }
        }

        // Terminate the QickPaste window
        private void QuickPasteWindowHide()
        {
            // If the quickpast window doesn't exist create it, and
            // add an event handler to it thatis used to generate events that identify the user action taken in that window
            if (quickPasteWindow is { IsLoaded: true })
            {
                quickPasteWindow.Hide();
                quickPasteWindow.Visibility = Visibility.Collapsed;
            }
        }

        private void QuickPasteWindowTerminate()
        {
            if (quickPasteWindow != null)
            {
                quickPasteWindow.Close();
                quickPasteWindow = null;
            }
        }
        #endregion

        #region Callbacks on Quickpast Event Type
        // The QuickPaste controls generate various events, depending on what the user selected.
        // Depending on the event received, perform the action indicated by the event by calling the appropriate method below
        private void QuickPasteWindow_QuickPasteEvent(object sender, QuickPasteEventArgs e)
        {
            switch (e.EventType)
            {
                case QuickPasteEventIdentifierEnum.New:
                    QuickPasteEntryNew();
                    break;
                case QuickPasteEventIdentifierEnum.Edit:
                    QuickPasteEntryEdit(e.QuickPasteEntry);
                    break;
                case QuickPasteEventIdentifierEnum.Delete:
                    QuickPasteEntryDelete(e.QuickPasteEntry);
                    break;
                case QuickPasteEventIdentifierEnum.MouseEnter:
                    QuickPasteDataControlsHighlight(e.QuickPasteEntry);
                    break;
                case QuickPasteEventIdentifierEnum.MouseLeave:
                    QuickPasteDataControlsUnHighlight(e.QuickPasteEntry);
                    break;
                case QuickPasteEventIdentifierEnum.MoveUp:
                case QuickPasteEventIdentifierEnum.MoveDown:
                    QuickPasteEntryMove(e.QuickPasteEntry, e.EventType);
                    break;
                case QuickPasteEventIdentifierEnum.Paste:
                    QuickPasteEntryPasteIntoDataControls(e.QuickPasteEntry, FlashEnum.FlashPreview);
                    break;
                case QuickPasteEventIdentifierEnum.ShortcutPaste:
                    QuickPasteEntryPasteIntoDataControls(e.QuickPasteEntry, FlashEnum.FlashBackground);
                    break;
                case QuickPasteEventIdentifierEnum.PositionChanged:
                    State.QuickPasteWindowPosition = quickPasteWindow.Position;
                    break;
            }
        }
        #endregion

        #region Method - QuickPaste Entry: New / Delete / Edit
        // Create a quickpaste entry from the current data controls,
        // add it to the quickpaste entries, and update the display and the ImageSetTable database as needed
        private void QuickPasteEntryNew()
        {
            string title = "QuickPaste #" + (quickPasteEntries.Count + 1);
            QuickPasteEntry quickPasteEntry = QuickPasteOperations.TryGetQuickPasteItemFromDataFields(DataHandler.FileDatabase, DataHandler.ImageCache.CurrentRow, title);
            if (quickPasteEntry == null)
            {
                return;
            }

            // Make sure the quickPasteWindow is not topmost, as it may otherwise occlude part of the QuickPaste Editor
            if (quickPasteWindow.IsLoaded)
            {
                quickPasteWindow.Topmost = false;
            }
            QuickPasteEditor quickPasteEditor = new QuickPasteEditor(quickPasteEntry, DataHandler.FileDatabase, DataEntryControls)
            {
                Owner = this
            };
            if (quickPasteEditor.ShowDialog() == true)
            {
                quickPasteEntry = quickPasteEditor.QuickPasteEntry;
                quickPasteEntries ??= [];
                quickPasteEntries.Add(quickPasteEntry);
                QuickPasteRefreshWindowAndJSON();
            }

            // Restore the quickPaste window back to its topmost state
            if (quickPasteWindow.IsLoaded)
            {
                quickPasteWindow.Topmost = true;
            }
        }

        // Delete the quickPaste Entry from the quickPasteEntries
        private void QuickPasteEntryDelete(QuickPasteEntry quickPasteEntry)
        {
            quickPasteEntries = QuickPasteOperations.DeleteQuickPasteEntry(quickPasteEntries, quickPasteEntry);
            QuickPasteRefreshWindowAndJSON();
        }

        // Move the item up or down the quickpaste list
        private void QuickPasteEntryMove(QuickPasteEntry quickPasteEntry, QuickPasteEventIdentifierEnum quickPasteEventIdentifier)
        {
            bool moveUp = quickPasteEventIdentifier == QuickPasteEventIdentifierEnum.MoveUp;
            quickPasteEntries = QuickPasteOperations.MoveQuickPasteEntry(quickPasteEntries, quickPasteEntry, moveUp);
            QuickPasteRefreshWindowAndJSON();
        }
        // Open the quickPaste Editor window 
        private void QuickPasteEntryEdit(QuickPasteEntry quickPasteEntry)
        {
            if (quickPasteEntry == null)
            {
                return;
            }

            // Make sure the quickPasteWindow is not topmost, as it may otherwise occlude part of the QuickPaste Editor
            if (quickPasteWindow.IsLoaded)
            {
                quickPasteWindow.Topmost = false;
            }

            QuickPasteEditor quickPasteEditor = new QuickPasteEditor(quickPasteEntry, DataHandler.FileDatabase, DataEntryControls)
            {
                Owner = this
            };

            if (quickPasteEditor.ShowDialog() == true)
            {
                QuickPasteRefreshWindowAndJSON();
            }

            // Restore the quickPaste window back to its topmost state
            if (quickPasteWindow.IsLoaded)
            {
                quickPasteWindow.Topmost = true;
            }
        }
        #endregion

        #region Method Highlight / Unhighlight Control
        // Highlight the data controls affected by the Quickpaste entry
        private void QuickPasteDataControlsHighlight(QuickPasteEntry quickPasteEntry)
        {
            FilePlayer_Stop(); // In case the FilePlayer is going
            int row = DataHandler.ImageCache.CurrentRow;
            if (!DataHandler.FileDatabase.IsFileRowInRange(row))
            {
                return; // This shouldn't happen, but just in case...
            }

            foreach (QuickPasteItem item in quickPasteEntry.Items)
            {
                if (item.Use == false)
                {
                    continue;
                }

                // Find the data entry control that matches the quickPasteItem's DataLael
                foreach (KeyValuePair<string, DataEntryControl> pair in DataEntryControls.ControlsByDataLabelThatAreVisible)
                {
                    DataEntryControl control = pair.Value;
                    if (control.DataLabel == item.DataLabel)
                    {
                        control.ShowPreviewControlValue(item.Value);
                    }
                }
            }
        }

        // Unhighlight the data controls affected by the Quickpaste entry
        private void QuickPasteDataControlsUnHighlight(QuickPasteEntry quickPasteEntry)
        {
            FilePlayer_Stop(); // In case the FilePlayer is going
            if (DataHandler?.ImageCache == null)
            {
                return;
            }
            int row = DataHandler.ImageCache.CurrentRow;
            if (!DataHandler.FileDatabase.IsFileRowInRange(row))
            {
                return; // This shouldn't happen, but just in case...
            }

            if (quickPasteEntry == null)
            {
                return;
            }
            foreach (QuickPasteItem item in quickPasteEntry.Items)
            {
                // If the item wasn't used, then it wasn't highlit.
                if (item.Use == false)
                {
                    continue;
                }

                // Find the data entry control that matches the quickPasteItem's DataLael
                foreach (KeyValuePair<string, DataEntryControl> pair in DataEntryControls.ControlsByDataLabelThatAreVisible)
                {
                    DataEntryControl control = pair.Value;
                    if (control.DataLabel == item.DataLabel)
                    {
                        control.Container.ClearValue(BackgroundProperty);
                        control.HidePreviewControlValue();
                        break;
                    }
                }
            }
        }
        #endregion

        #region Method Paste entry
        // Quickpast the given entry into the data control
        private void QuickPasteEntryPasteIntoDataControls(QuickPasteEntry quickPasteEntry, FlashEnum flash)
        {
            FilePlayer_Stop(); // In case the FilePlayer is going
            int row = DataHandler.ImageCache.CurrentRow;
            if (!DataHandler.FileDatabase.IsFileRowInRange(row))
            {
                return; // This shouldn't happen, but just in case...
            }

            foreach (QuickPasteItem item in quickPasteEntry.Items)
            {
                if (item.Use == false)
                {
                    continue;
                }

                // Find the data entry control that matches the quickPasteItem's DataLabel
                foreach (KeyValuePair<string, DataEntryControl> pair in DataEntryControls.ControlsByDataLabelThatAreVisible)
                {
                    DataEntryControl control = pair.Value;
                    if (control.DataLabel == item.DataLabel)
                    {
                        // Changing a counter value does not trigger a ValueChanged event if the values are the same.
                        // which means multiple images may not be updated even if other images have the same value.
                        // To get around this, we set a bogus value and then the real value, which means that the
                        // ValueChanged event will be triggered. Inefficient, but seems to work.
                        if (IsDisplayingMultipleImagesInOverview() && control is DataEntryCounter counter)
                        {
                            counter.SetBogusCounterContentAndTooltip();
                        }

                        control.SetContentAndTooltip(item.Value);
                        if (control is DataEntryMultiChoice)
                        {
                            // SAULXXX For some reason, I have to do this explicitly for a multichoice control. It warrants looking into,
                            // as other controls don't need this. Likely a function of handling this control in a slightly different way.
                            // I had to make updateRowsDepending... public to make this work. If I fix this, make it private again.
                            DataHandler.UpdateRowsDependingOnThumbnailGridState(control.DataLabel, control.Content);
                        }
                        if (flash == FlashEnum.FlashPreview)
                        {
                            control.FlashPreviewControlValue();
                        }
                        else
                        {
                            control.FlashContentControl();
                        }
                        break;
                    }
                }
            }
        }
        #endregion

        #region Refresh Quickpaste Refresh Window and JSON
        // Update the Quickpaste JSON in the ImageSetTable and refresh the Quickpaste window to reflect the current contents
        private void QuickPasteRefreshWindowAndJSON()
        {
            DataHandler.FileDatabase.ImageSet.QuickPasteAsJSON = JsonConvert.SerializeObject(quickPasteEntries);
            DataHandler.FileDatabase.UpdateSyncImageSetToDatabase();
            quickPasteWindow?.Refresh(quickPasteEntries);
        }
        #endregion
    }
}
