using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using Timelapse.DataStructures;
using Timelapse.EventArguments;

namespace Timelapse.Dialog
{
    /// <summary>
    /// Interaction logic for ImageAdjuster.xaml
    /// </summary>
    public partial class ImageAdjuster
    {
        #region Private variables
        // Store the various parameters that indicate how the image should be adjusted
        private int Contrast;
        private double Brightness;
        private bool DetectEdges;
        private bool Sharpen;
        private bool UseGamma;
        private float GammaValue = 1;

        // State information
        private bool AbortUpdate;
        #endregion

        #region Consructor, Loading and Closing
        public ImageAdjuster(Window owner)
        {
            InitializeComponent();
            Owner = owner;
        }

        // Position the window on the display 
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            // Position the window
            Left = Owner.Left + Owner.Width - Width - 10;
            Top = Owner.Top + 3;

            // Brightness min/max are defined in XAML 0 is black, 1 is neutral, 2 is double brightness etc
            int sliderMinMax = 75;
            ContrastSlider.Maximum = sliderMinMax;
            ContrastSlider.Minimum = -sliderMinMax;
            GammaSlider.Minimum = .1;
            GammaSlider.Maximum = 1.9;
            GammaSlider.Value = GammaValue;

            // Register the various control callbacks. 
            CBEdges.Checked += RadioButtons_CheckChanged;
            CBSharpen.Checked += RadioButtons_CheckChanged;
            CBNone.Checked += RadioButtons_CheckChanged;
            ContrastSlider.ValueChanged += ImageSliders_ValueChanged;
            BrightnessSlider.ValueChanged += ImageSliders_ValueChanged;
            GammaSlider.ValueChanged += ImageSliders_ValueChanged;
        }

        // Reuse the window by changing closing to hiding
        private void Window_Closing(object sender, CancelEventArgs e)
        {
            e.Cancel = true;
            Hide();
        }
        #endregion

        #region Public Methods - Show/Hide
        // Showing the window activates everything as needed
        public new void Show()
        {
            // Receipt of this event from the Markable Canvase provides information used to decide how this control should appear e.g., reset, activated, etc.
            GlobalReferences.MainWindow.MarkableCanvas.ImageStateChanged += ConfigureWindowState;
            base.Show();
        }

        // Hiding the window essentially resets everything and deactivates the primary event handler, 
        public new void Hide()
        {
            ResetControlsToNeutralValues();
            UpdateImageParametersAndGenerateEvent();
            GlobalReferences.MainWindow.MarkableCanvas.ImageStateChanged -= ConfigureWindowState;
            base.Hide();
        }
        #endregion

        #region Receive Event and adjust window appearance state- generated by MarkableCanvas
        private void ConfigureWindowState(object sender, ImageStateEventArgs e)
        {
            EnableControls(e.IsImageView);
        }

        // Enabel/disable controls as needed and/or change the various control colorings to indicate the primary sections being used
        private void EnableControls(bool enabledState)
        {
            IsEnabled = enabledState;

            // Set up the brushes
            Brush enabledGammaBrush = enabledState && (CBGamma.IsChecked == true) ? Brushes.Black : Brushes.Gray;
            Brush enabledOtherBrush = enabledState && (CBGamma.IsChecked == true) ? Brushes.Gray : Brushes.Black;
            Brush isEnabledBrush = enabledState ? Brushes.Black : Brushes.Gray;

            // Provide a more disabled appearance to radio buttons, checkboxes and slider labels 
            CBNone.Foreground = enabledState ? enabledOtherBrush : isEnabledBrush;
            CBEdges.Foreground = CBNone.Foreground;
            CBSharpen.Foreground = CBNone.Foreground;
            BrightnessLabel.Foreground = CBNone.Foreground;
            ContrastLabel.Foreground = CBNone.Foreground;

            OtherControlsArea.Background = enabledState && (CBGamma.IsChecked == false) ? Brushes.White : Brushes.WhiteSmoke;
            GammaArea.Background = enabledState && (CBGamma.IsChecked == true) ? Brushes.White : Brushes.WhiteSmoke;
            CBGamma.Foreground = enabledState ? enabledGammaBrush : isEnabledBrush;

            ButtonArea.Background = enabledState ? Brushes.White : Brushes.WhiteSmoke;
            ButtonReset.IsEnabled = !IsNeutral();
        }
        #endregion

        #region Update Image Parameters
        // Update the image processing parameters to those in the checkboxes and sliders
        // Then generate an event to inform the Markable Canvase to update the image according to those paraemeters
        private void UpdateImageParametersAndGenerateEvent(bool forceUpdate = false)
        {
            //this.AdjustLook();
            EnableControls(true);
            if (AbortUpdate)
            {
                return;
            }

            // We only update everything and send the event if the final values differ from the current values
            if (forceUpdate || (Contrast != Convert.ToInt32(ContrastSlider.Value) || Math.Abs(Brightness - BrightnessSlider.Value) > .0001 || Math.Abs(GammaValue - GammaSlider.Value) > .0001
                || DetectEdges != CBEdges.IsChecked || Sharpen != CBSharpen.IsChecked || UseGamma != CBGamma.IsChecked))
            {
                Contrast = Convert.ToInt32(ContrastSlider.Value);
                Brightness = BrightnessSlider.Value;
                DetectEdges = CBEdges.IsChecked == true;
                Sharpen = CBSharpen.IsChecked == true;
                UseGamma = CBGamma.IsChecked == true;
                GammaValue = (float)(GammaSlider.Maximum - GammaSlider.Value);

                // Generate an event to inform the Markable Canvase to update the image. 
                // Note that the last argument (to invoke an external image viewer) is always false, as that is handeld separately
                OnImageProcessingParametersChanged(new ImageAdjusterEventArgs(Brightness, Contrast, Sharpen, DetectEdges, UseGamma, GammaValue, false, forceUpdate));
            }
            ButtonReset.IsEnabled = !IsNeutral();
        }

        // Reset the controls  to their neutral values (i.e. to restore the original image)
        private void ResetControlsToNeutralValues()
        {
            // We don't update anything until after we reset the sliders and checkbox, as otherwise it would generate an event for each change
            AbortUpdate = true;
            BrightnessSlider.Value = 1;
            ContrastSlider.Value = 0;
            CBNone.IsChecked = true;
            GammaSlider.Value = 1;
            CBGamma.IsChecked = false;
            AbortUpdate = false;
            EnableControls(true);
            //this.AdjustLook();
        }
        #endregion

        #region UI Callbacks - image processing parameters altered in the UI
        // Send keboard events to the markable canvas, mostly so that the navigation keys will work.
        private void Control_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            Keyboard.Focus(GlobalReferences.MainWindow.MarkableCanvas);
            GlobalReferences.MainWindow.MarkableCanvas.RaiseEvent(e);
        }

        private void ButtonImageViewer_Click(object sender, RoutedEventArgs e)
        {
            // Generate an event to inform the Markable Canvas, in this case to invoke the file viewer 
            // The only thing of importance in this call is that the final argument (openExternalViewer) is true. The other values will be ignored. 
            OnImageProcessingParametersChanged(new ImageAdjusterEventArgs(Brightness, Contrast, Sharpen, DetectEdges, UseGamma, GammaValue, true, false));
        }

        // Update allimage processing parameters whenever the user changes any of them
        private void RadioButtons_CheckChanged(object sender, RoutedEventArgs e)
        {
            // Set the gamma checkbox to reflect that a radiobutton option was pressed
            CBGamma.IsChecked = false;
            UpdateImageParametersAndGenerateEvent();
        }

        // Update all image processing parameters and then update the image based on that
        private void ImageSliders_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Set the gamma checkbox to reflect what slider was moved
            CBGamma.IsChecked = (sender is Slider slider && slider == GammaSlider);
            UpdateImageParametersAndGenerateEvent();
        }
        private void CBGamma_CheckedChanged(object sender, RoutedEventArgs e)
        {
            UpdateImageParametersAndGenerateEvent();
        }

        private void ButtonReset_Click(object sender, RoutedEventArgs e)
        {
            ResetControlsToNeutralValues();
            UpdateImageParametersAndGenerateEvent();
        }

        private void ButtonApply_Click(object sender, RoutedEventArgs e)
        {
            UpdateImageParametersAndGenerateEvent(true);
        }
        #endregion

        #region Event Generation - Generate an event whenever the parameters change
        // Whenever an image is changed, raise an event (to be consumed by MarkableCanvas)
        public event EventHandler<ImageAdjusterEventArgs> ImageProcessingParametersChanged;

        protected virtual void OnImageProcessingParametersChanged(ImageAdjusterEventArgs e)
        {
            ImageProcessingParametersChanged?.Invoke(this, e);
        }

        #endregion

        #region Helpers
        private bool IsNeutral()
        {
            return ((CBGamma.IsChecked == false && CBNone.IsChecked == true && Math.Abs(BrightnessSlider.Value - 1) < .001 && ContrastSlider.Value == 0)
                     || (CBGamma.IsChecked == true && Math.Abs(GammaSlider.Value - 1) < .0001));
        }
        #endregion
    }
}
